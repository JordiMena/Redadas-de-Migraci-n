@page "/Index"
@rendermode InteractiveServer
@inject NavigationManager NavMan
@inject IJSRuntime JSx
@using System.Text.Json

<PageTitle>Listado de Registros</PageTitle>

<h1 class="fw-bolder text-center mt-5 mb-5">Listado de Registros</h1>

<div class="mb-3 row">
    <div class="col-3">
        <button class="btn btn-primary w-100 fw-bold" @onclick="NuevoRegistro">Nuevo Registro</button>
    </div>
</div>
    <table class="table table-striped table-bordered mb-5">
        <thead class="bg-secondary text-white">
            <tr>
                <th class="text-center">Fecha Detención</th>
                <th class="text-center">Nombre</th>
                <th class="text-center">Apellido</th>
                <th class="text-center">Cédula</th>
                <th class="text-center">Motivo</th>
                <th class="text-center">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var redada in redadasFiltradas)
            {
                <tr>
                    <td class="text-center">@redada.FechaDetencion</td>
                    <td class="text-center">@redada.Nombre</td>
                    <td class="text-center">@redada.Apellido</td>
                    <td class="text-center">@redada.Cedula</td>
                    <td class="text-center">@((redada.Motivo.Length > 20) ? @redada.Motivo.Substring(0, 20) + "..." : @redada.Motivo)</td>
                    <td class="btn btn-group-sm">
                        <button @onclick="() => editarFila(redada)" class="btn btn-success fw-bold">Editar</button>
                        <button @onclick="() => eliminarFila(redada)" class="btn btn-danger fw-bold">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>


@code {
    List<Redadas> redadas = new List<Redadas>();
    List<Redadas> redadasFiltradas = new List<Redadas>();
    string filtro = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var redadasJson = await JSx.InvokeAsync<string>("localStorage.getItem", "redadas");

            if (redadasJson != null)
            {
                redadas = JsonSerializer.Deserialize<List<Redadas>>(redadasJson) ?? new List<Redadas>();
                redadasFiltradas = new List<Redadas>(redadas);
            }
            else
            {
                redadas = new List<Redadas>();
                redadasFiltradas = new List<Redadas>();
            }

            StateHasChanged();
        }
    }

    private void NuevoRegistro()
    {
        NavMan.NavigateTo("/listado/nuevo");
    }

    private void editarFila(Redadas redada)
    {
        NavMan.NavigateTo("listado/editar/" + redada.Id);
    }

    private async Task eliminarFila(Redadas redada)
    {
        var confirmacion = await JSx.InvokeAsync<bool>("confirm", "¿Está segur@ de eliminar el registro?");

        if (confirmacion)
        {
            redadas.RemoveAll(r => r.Id == redada.Id);
            redadasFiltradas.RemoveAll(r => r.Id == redada.Id);

            await JSx.InvokeVoidAsync("localStorage.setItem", "registros", JsonSerializer.Serialize(redadas));
            await InvokeAsync(StateHasChanged);
            await JSx.InvokeVoidAsync("alert", "Registro eliminado exitosamente.");
        }
    }

}